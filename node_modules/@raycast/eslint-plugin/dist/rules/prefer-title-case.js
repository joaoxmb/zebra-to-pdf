"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.titleCase = void 0;
const utils_1 = require("@typescript-eslint/utils");
const utils_2 = require("../utils");
exports.default = (0, utils_2.createRule)({
    create: (context) => {
        return {
            JSXOpeningElement: (node) => {
                if ((0, utils_2.isActionComponent)(node.name)) {
                    const titleAttribute = node.attributes.find((attribute) => {
                        return (attribute.type === "JSXAttribute" &&
                            attribute.name.name === "title");
                    });
                    if (titleAttribute) {
                        const value = titleAttribute.type === "JSXAttribute" && titleAttribute.value;
                        if (value) {
                            if (value.type === utils_1.AST_NODE_TYPES.Literal &&
                                typeof value.value === "string") {
                                const originalTitle = value.value;
                                const formattedTitle = titleCase(originalTitle);
                                if (originalTitle !== formattedTitle) {
                                    context.report({
                                        node: value,
                                        messageId: "isNotTitleCased",
                                        fix: (fixer) => fixer.replaceText(value, `"${formattedTitle}"`),
                                    });
                                }
                            }
                            if (value.type === utils_1.AST_NODE_TYPES.JSXExpressionContainer) {
                                const expression = value.expression;
                                if (expression.type === utils_1.AST_NODE_TYPES.Literal &&
                                    expression.value &&
                                    typeof expression.value === "string") {
                                    const formattedTitle = titleCase(expression.value);
                                    if (expression.value !== formattedTitle) {
                                        context.report({
                                            node: expression,
                                            messageId: "isNotTitleCased",
                                            fix: (fixer) => fixer.replaceText(expression, `"${formattedTitle}"`),
                                        });
                                    }
                                }
                                if (expression.type === utils_1.AST_NODE_TYPES.ConditionalExpression) {
                                    const consequent = expression.consequent;
                                    const alternate = expression.alternate;
                                    if (consequent.type === utils_1.AST_NODE_TYPES.Literal &&
                                        consequent.value &&
                                        typeof consequent.value === "string") {
                                        const formattedTitle = titleCase(consequent.value);
                                        if (consequent.value !== formattedTitle) {
                                            context.report({
                                                node: consequent,
                                                messageId: "isNotTitleCased",
                                                fix: (fixer) => fixer.replaceText(consequent, `"${formattedTitle}"`),
                                            });
                                        }
                                    }
                                    if (alternate.type === utils_1.AST_NODE_TYPES.Literal &&
                                        alternate.value &&
                                        typeof alternate.value === "string") {
                                        const formattedTitle = titleCase(alternate.value);
                                        if (alternate.value !== formattedTitle) {
                                            context.report({
                                                node: alternate,
                                                messageId: "isNotTitleCased",
                                                fix: (fixer) => fixer.replaceText(alternate, `"${formattedTitle}"`),
                                            });
                                        }
                                    }
                                }
                                if (expression.type === utils_1.AST_NODE_TYPES.TemplateLiteral) {
                                    const quasis = expression.quasis;
                                    var hasQuasiWithoutTitleCase = false;
                                    quasis.forEach((quasi) => {
                                        if (quasi.type === utils_1.AST_NODE_TYPES.TemplateElement &&
                                            quasi.value &&
                                            typeof quasi.value.raw === "string") {
                                            const formattedTitle = titleCase(quasi.value.raw);
                                            if (quasi.value.raw !== formattedTitle) {
                                                hasQuasiWithoutTitleCase = true;
                                            }
                                        }
                                    });
                                    if (hasQuasiWithoutTitleCase) {
                                        return context.report({
                                            node: expression,
                                            messageId: "isNotTitleCased",
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
            },
        };
    },
    name: "prefer-title-case",
    meta: {
        fixable: "code",
        messages: {
            isNotTitleCased: "Prefer Title Case naming convention for action titles (e.g Copy to Clipboard).",
        },
        type: "suggestion",
        docs: {
            recommended: "warn",
            description: "Prefer Title Case",
        },
        schema: [],
    },
    defaultOptions: [],
});
function titleCase(s) {
    const noCaps = {
        and: true,
        but: true,
        or: true,
        nor: true,
        for: true,
        yet: true,
        so: true,
        to: true,
        as: true,
        at: true,
        by: true,
        from: true,
        in: true,
        into: true,
        of: true,
        off: true,
        on: true,
        onto: true,
        out: true,
        over: true,
        up: true,
        with: true,
    };
    const articles = {
        a: true,
        an: true,
        the: true,
    };
    const fixedCaseWords = {
        npm: true,
        "crates.io": true,
        dbt: true,
        "pub.dev": true,
        kubectx: true,
        "monday.com": true,
        "ray.so": true,
        flomo: true,
        iterm: true,
        xkcd: true,
        macos: true,
        iphone: true,
        github: true,
        ide: true,
        url: true,
        vs: true,
        ai: true,
    };
    const fixedCaseWordsMap = {
        npm: "npm",
        "crates.io": "crates.io",
        dbt: "dbt",
        "pub.dev": "pub.dev",
        kubectx: "kubectx",
        "monday.com": "monday.com",
        "ray.so": "ray.so",
        flomo: "flomo",
        iterm: "iTerm",
        xkcd: "xkcd",
        macos: "macOS",
        iphone: "iPhone",
        github: "GitHub",
        ide: "IDE",
        url: "URL",
        vs: "VS",
        ai: "AI",
    };
    s = s.replace(/\.\.\./g, "â€¦");
    const words = s.split(" ");
    for (let i = 0; i < words.length; i++) {
        const word = words[i];
        const lowerWord = word.toLowerCase();
        const ok = noCaps[lowerWord];
        const isArticle = articles[lowerWord];
        const isFixedCase = fixedCaseWords[lowerWord];
        if (isFixedCase) {
            words[i] = fixedCaseWordsMap[lowerWord];
        }
        else if ((!ok && !isArticle) ||
            i === 0 ||
            i === words.length - 1 ||
            (isArticle && words[i - 1].endsWith(":"))) {
            words[i] = word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
        }
        else {
            words[i] = word.toLowerCase();
        }
    }
    return words.join(" ");
}
exports.titleCase = titleCase;
